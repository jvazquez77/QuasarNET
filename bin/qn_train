#!/usr/bin/env python
import argparse
import numpy as np
import fitsio

from quasarnet.models import QuasarNET, custom_loss
from tensorflow.keras.optimizers import Adam
from quasarnet import io

parser = argparse.ArgumentParser()

parser.add_argument("-t","--truth", type = str, required=False,nargs="*")
parser.add_argument("-d","--data", type = str, required=True,nargs="*")
parser.add_argument("--nspec", type = int, required=False)
parser.add_argument("-dt","--data-train", type = str, required=True)
parser.add_argument("-e","--epochs", type = int,
        required=False, default = 5)
parser.add_argument("-o","--out-prefix", type = str, required=True)
parser.add_argument("-l","--lines", type = str,
        required=False, default = ["LYA"], nargs="*")
parser.add_argument("-b","--lines-bal", type = str,
        required=False, default = ["CIV(1548)"], nargs="*")
parser.add_argument("--decay", type = float, required=False, 
        default = 0.)

args = parser.parse_args()

truth = io.read_truth(args.truth)

h = fitsio.FITS(args.data_train)
tids_train = h[1]['TARGETID'][:]

truth = {t:truth[t] for t in tids_train if t in truth}
nspec = len(truth)
if args.nspec:
    nspec = args.nspec

print('number of spectra',nspec)

tids,X,Y,z,bal = io.read_data(args.data, truth, nspec = nspec, verbosity=0)
box, sample_weight = io.objective(z,Y,bal,lines=args.lines,lines_bal=args.lines_bal)

model = QuasarNET(
        X[0,:,None].shape, 
        nlines=len(args.lines)+len(args.lines_bal)
        )

loss = []
for i in args.lines:
    loss.append('binary_crossentropy')

for i in args.lines_bal:
    loss.append('binary_crossentropy')

adam = Adam(decay=args.decay)
model.compile(optimizer=adam, loss=loss, metrics=[])


print( "starting fit")
print(Y.shape)
batch_size = 256
history = model.fit(X[:,:,None],box,
        batch_size = batch_size,
        sample_weight = sample_weight,
        epochs = args.epochs)

model.save(args.out_prefix+".h5")
model.summary()

cols = []
fout = fitsio.FITS(args.out_prefix+"_hist.fits",'rw',clobber=True)
for v in history.history.values():
    cols.append(np.array(v))

fout.write(cols, names=list(history.history.keys()))
fout.close()
